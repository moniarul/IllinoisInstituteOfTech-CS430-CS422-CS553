corpus <- TextReuseCorpus(files, tokenizer = tokenize_ngrams, n = 5, keep_tokens = TRUE)
corpus
tdm <- as.matrix.textreuse_candidates
tdm
rowSums(tdm)
d <- corpus[['user20']]
d
m <- pairwise_compare(corpus, jaccard_similarity, progress=interactive())
pairwise_candidates(m, directinal = FALSE)
lsh(corpus, 40, progress = interactive())
data<- read.csv(file = "movies.csv", header = TRUE, sep=',') #read data from movies.csv
data2 <-data.frame(data) #converted to dataframe
data<- read.csv(file = "movies.csv", header = TRUE, sep=',')
data<- read.csv(file = "/Users/diesel/Desktop/Assignments&Coursework/422/hw4/ml-latest-small/movies.csv", header = TRUE, sep=',') #read data from movies.csv
data2 <-data.frame(data)
df <- data.frame(matrix(ncol = 21, nrow = nrow(data2)))
x <- c("Movie_Id","Action", "Adventure", "Animation", "Children", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "Film-
Noir", "Horror", "IMAX", "Musical", "Mystery", "Romance", "Sci-Fi", "Thriller", "War", "Western", "(no genres listed)")
colnames(df) <- x
df$Movie_Id <- data2$movieId
for( i in rownames(data2) ){ #loop to check for genres in movies.csv and mark as 1 in df or 0
num = 0
for(j in colnames(df)){
num = num +1
#print(data2[i, "genres"])
if(str_detect(data2[i, "genres"], j) == TRUE){ #if genre present
df[i,num] = 1
}
else{
if(j != "Movie_Id"){
df[i,num] = 0
}
}
#print(i)
#print(j)
}
}
data<- read.csv(file = "/Users/diesel/Desktop/Assignments&Coursework/422/hw4/ml-latest-small/ratings.csv", header = TRUE, sep=',') #read from ratings.csv
data3 <-data.frame(data)
df2 <- data.frame(matrix(ncol = 21, nrow = 20)) #new dataframe for user
colnames(df2) <- x
for( i in rownames(data3) ){ #getting movies for user 1
if(data3[i,1] ==1){
df2[i,1] = data3[i,2]
}
}
ind = 0
for (j in df$Movie_Id){ #populating the genres of movies user 1 rated to his dataframe - df2
ind = ind +1
ind2 = 0
for (i in df2$Movie_Id){
ind2 = ind2 +1
print(i)
if (i == j){
print("mhere")
df2[ind2,] = df[ind,]
}
}
}
data<- read.csv(file = "/Users/diesel/Desktop/Assignments&Coursework/422/hw4/ml-latest-small/movies.csv", header = TRUE, sep=',') #read data from movies.csv
data2 <-data.frame(data) #converted to dataframe
df <- data.frame(matrix(ncol = 21, nrow = nrow(data2))) #new dataframe dor attributes for types
x <- c("Movie_Id","Action", "Adventure", "Animation", "Children", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "Film-
Noir", "Horror", "IMAX", "Musical", "Mystery", "Romance", "Sci-Fi", "Thriller", "War", "Western", "(no genres listed)")
colnames(df) <- x
df$Movie_Id <- data2$movieId #copying the movie ids
for( i in rownames(data2) ){ #loop to check for genres in movies.csv and mark as 1 in df or 0
num = 0
for(j in colnames(df)){
num = num +1
#print(data2[i, "genres"])
if(str_detect(data2[i, "genres"], j) == TRUE){ #if genre present
df[i,num] = 1
}
else{
if(j != "Movie_Id"){
df[i,num] = 0
}
}
#print(i)
#print(j)
}
}
movies <- data.frame(read.csv(file = "/Users/diesel/Desktop/Assignments&Coursework/422/hw4/ml-latest-small/movies.csv", header = TRUE, sep=',')) #read data from movies.csv
allGenere <- c("Action", "Adventure", "Animation", "Children", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "Film-Noir", "Horror", "IMAX", "Musical", "Mystery", "Romance", "Sci-Fi", "Thriller", "War", "Western","(no genres listed)")
movieMatrix <- data.frame(matrix(ncol = length(allGenere), nrow = nrow(movieDF)))
movies <- data.frame(read.csv(file = "/Users/diesel/Desktop/Assignments&Coursework/422/hw4/ml-latest-small/movies.csv", header = TRUE, sep=',')) #read data from movies.csv
allGenere <- c("Action", "Adventure", "Animation", "Children", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "Film-Noir", "Horror", "IMAX", "Musical", "Mystery", "Romance", "Sci-Fi", "Thriller", "War", "Western","(no genres listed)")
movieMatrix <- data.frame(matrix(ncol = length(allGenere), nrow = nrow(movies)))
colnames(movies) <- allGenere
data<- read.csv(file = "/Users/diesel/Desktop/Assignments&Coursework/422/hw4/ml-latest-small/movies.csv", header = TRUE, sep=',') #read data from movies.csv
data2 <-data.frame(data) #converted to dataframe
df <- data.frame(matrix(ncol = 21, nrow = nrow(data2))) #new dataframe dor attributes for types
x <- c("Movie_Id","Action", "Adventure", "Animation", "Children", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "Film-
Noir", "Horror", "IMAX", "Musical", "Mystery", "Romance", "Sci-Fi", "Thriller", "War", "Western", "(no genres listed)")
colnames(df) <- x
df$Movie_Id <- data2$movieId #copying the movie ids
for( i in rownames(data2) ){ #loop to check for genres in movies.csv and mark as 1 in df or 0
num = 0
for(j in colnames(df)){
num = num +1
if(str_detect(data2[i, "genres"], j) == TRUE){ #if genre present
df[i,num] = 1
}
else{
if(j != "Movie_Id"){
df[i,num] = 0
}
}
}
}
options("digits"=5)
my.cosine <- function(x,y) {
print(sum(x*y)/(norm(x,type="2") * norm(y,type = "2")))
}
for(i in 1:nrow(movieProfile)){
val <- my.cosine(as.numeric(userProfile["avg",i]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],]))
#sprintf("Movie similarity score %f",1 )
sprintf("%s is %f feet tall\n", "Sven", 7.1)
}
x <- c()
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(as.numeric(userProfile["avg",i]),as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],]))[1,1])
x <- c()
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(as.numeric(userProfile["avg",i]),as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],]))
}
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 6)
print(x)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 6)
print(x[1])
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 4)
print(x[1])
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 4)
sprintf("%d",x[1])
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 4)
sprintf("%d",x[1])
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 4)
sprintf("%d",x[1])
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 4)
sprintf("%f",x[1])
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 4)
sprintf("%f",x[1])
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
print("Hi")
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
options("digits"=5)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 4)
sprintf("%f",x[1])
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 4)
sprintf("%f",x[1])
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 4)
print(x)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 4)
print(x[1])
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 4)
sprintf("%.10f",x[1])
}
options(digits=10)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 4)
sprintf("%.10f",x[1])
}
options(digits=10)
for(i in 1:nrow(movieProfile)){
x <- lsa::cosine(i, 4)
sprintf("%.100f",pi)
}
options("digits"=5)
my.cosine <- function(x,y) {
print(sum(x*y)/(norm(x,type="2") * norm(y,type = "2")))
}
my.cosine1 <- function(x,y) {
print(lsa::cosine(x,y))
}
for(i in 1:nrow(movieProfile)){
v <- c(v,(lsa::cosine(movie_v,user)[1,1]))
val <- my.cosine1(as.numeric(userProfile["avg",i]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],]))
}
options("digits"=5)
my.cosine <- function(x,y) {
print(sum(x*y)/(norm(x,type="2") * norm(y,type = "2")))
}
my.cosine1 <- function(x,y) {
print(lsa::cosine(x,y))
}
for(i in 1:nrow(movieProfile)){
val <- my.cosine1(as.numeric(userProfile["avg",i]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],]))
}
options("digits"=5)
my.cosine <- function(x,y) {
print(sum(x*y)/(norm(x,type="2") * norm(y,type = "2")))
}
my.cosine1 <- function(x,y) {
print(lsa::cosine(x,y))
}
for(i in 1:nrow(movieProfile)){
val <- my.cosine1(as.numeric(userProfile["avg",i]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],]))
val <- my.cosine1(as.vector(userProfile["avg",i]), as.vector(movieProfile[movieProfile$X == movieProfile[i,'X'],]))
}
options("digits"=5)
my.cosine <- function(x,y) {
print(sum(x*y)/(norm(x,type="2") * norm(y,type = "2")))
}
my.cosine1 <- function(x,y) {
print(lsa::cosine(x,y))
}
for(i in 1:nrow(movieProfile)){
val <- my.cosine1(as.vector(userProfile["avg",i]), as.vector(movieProfile[movieProfile$X == movieProfile[i,'X'],]))
}
movieProfile[movieProfile$X == movieProfile[1,'X'],]
movieProfile[movieProfile$X == movieProfile[1,'X'],2:]
movieProfile[movieProfile$X == movieProfile[1,'X'],-2]
movieProfile[movieProfile$X == movieProfile[1,'X'],-1]
userProfile["avg",1]
userProfile["avg"]
userProfile["avg",]
userProfile["avg",-1]
options("digits"=5)
my.cosine <- function(x,y) {
print(sum(x*y)/(norm(x,type="2") * norm(y,type = "2")))
}
my.cosine1 <- function(x,y) {
print(lsa::cosine(x,y))
}
for(i in 1:nrow(movieProfile)){
val <- my.cosine1(as.vector(userProfile["avg",-1]), movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))
options("digits"=5)
my.cosine <- function(x,y) {
print(sum(x*y)/(norm(x,type="2") * norm(y,type = "2")))
}
my.cosine1 <- function(x,y) {
print(lsa::cosine(x,y))
}
for(i in 1:nrow(movieProfile)){
val <- my.cosine1(as.vector(userProfile["avg",-1]), movieProfile[movieProfile$X == movieProfile[i,'X'],-1])
}
options("digits"=5)
my.cosine <- function(x,y) {
print(sum(x*y)/(norm(x,type="2") * norm(y,type = "2")))
}
my.cosine1 <- function(x,y) {
print(lsa::cosine(x,y))
}
for(i in 1:nrow(movieProfile)){
val <- my.cosine1(userProfile["avg",-1], movieProfile[movieProfile$X == movieProfile[i,'X'],-1])
}
options("digits"=5)
my.cosine <- function(x,y) {
print(sum(x*y)/(norm(x,type="2") * norm(y,type = "2")))
}
my.cosine1 <- function(x,y) {
print(lsa::cosine(x,y))
}
for(i in 1:nrow(movieProfile)){
val <- my.cosine1(as.vector(userProfile["avg",-1]), as.vector(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))
}
as.vector(userProfile["avg",-1])
as.vector(movieProfile[movieProfile$X == movieProfile[i,'X'],-1])
y <- as.vector(movieProfile[movieProfile$X == movieProfile[i,'X'],-1])
type(y)
typeof(y)
y <- c(2, 3, 5)
typeof(y)
userProfile["avg",-1]
type(userProfile["avg",-1])
typeof(userProfile["avg",-1])
userProfile["avg",-1]
userProfile["avg",-1][[1]]
userProfile["avg",-1][[2]]
userProfile["avg",-1][2]
lsa::cosine(.56,.45)
lsa::cosine(.56,.45)[[1]]
lsa::cosine(.56,.45)[[1]]
options("digits"=5)
lsa::cosine(.56,.45)[[1]]
lsa::cosine(c(1,3),c(4,5))[[1]]
lsa::cosine(c(1,3,2),c(4,5,6))[[1]]
lsa::cosine(c(.1,.3,.2),c(4,5,6))[[1]]
lsa::cosine(c(.1,.3,.2),c(40,51,.6))[[1]]
lsa::cosine(c(.1,.3,.2),c(.40,51,.6))[[1]]
sprintf("%f", lsa::cosine(c(.1,.3,.2),c(.40,51,.6))[[1]])
userProfile["avg",-1]
userProfile["avg",-1][1]
userProfile["avg",-1][[1]]
userProfile["avg",-1][[1,]]
as.numeric(userProfile["avg"])
as.numeric(userProfile["avg",])
x <- as.numeric(userProfile["avg",])
typeof(x)
y <- as.numeric(movieProfile[movieProfile$X == movieProfile[1,'X'],-1])
y
typeof(y)
x <- as.numeric(userProfile["avg",-1])
x
options("digits"=5)
for(i in 1:nrow(movieProfile)){
print(lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[1,'X'],-1])))
}
#val <- my.cosine1(as.numeric(userProfile["avg",i]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],]))
options("digits"=5)
for(i in 1:nrow(movieProfile)){
print(lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1])))
}
#val <- my.cosine1(as.numeric(userProfile["avg",i]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],]))
options("digits"=5)
for(i in 1:nrow(movieProfile)){
print(lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]])
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
print(lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]])
}
movieProfile[movieProfile$X == movieProfile[i,'X'],1]
movieProfile[movieProfile$X == movieProfile[i,'X'],1]
movieProfile[movieProfile$X == movieProfile[i,'X'],2]
movieProfile[movieProfile$X == movieProfile[1,'X'],1]
movieProfile[movieProfile$X == movieProfile[2,'X'],1]
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]])
movies$movieId == 1990
movies[movies$movieId == 1990, ]
movies[movies$movieId == 1990, ]$title
movies[movies$movieId == 1990, ]$title[[1]]
movies[movies$movieId == 1990,"title" ]
movies[movies$movieId == 1990,"title" ][1]
movies[movies$movieId == 1990,"title" ][[1]
]
typeof(movies[movies$movieId == 1990,"title"])
typeof(movies[movies$movieId == 1990,2])
movies[movies$movieId == 1990,2]
levels(movies[movies$movieId == 1990,2])
movies[movies$movieId == 1990,2]
typeof(movies[movies$movieId == 1990,"title"])
as.vector((movies[movies$movieId == 1990,"title"])
)
as.vector(movies[movies$movieId == 1990,"title"])
as.vector(movies[movies$movieId == 1990,"title"])[1]
as.vector(movies[movies$movieId == 1990,"title"])[[1]]
)
as.vector(movies[movies$movieId == 1990,"title"])[1]
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
sprintf("Movie %s, similarity score %f",title, score)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
sprintf("Movie, similarity score %f", score)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
sprintf("Movie, similarity score %f", score)
print(score)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
sprintf("Movie, %s similarity score", title)
print(score)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
print("Movie" + title)
print(score)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
print("Movie %s", title)
print(score)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
sprintf("Movie %s", title)
print(score)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
sprintf("Movie %s", title[1])
print(score)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
print(title)
print(score)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
print(title, score)
print(score)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
print(title, score)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
cat("Movie with title and similarity score: ", title)
print(score)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
cat("Movie with title and similarity score: ", title, score)
}
options("digits"=5)
for(i in 1:nrow(movieProfile)){
score <- lsa::cosine(as.numeric(userProfile["avg",-1]), as.numeric(movieProfile[movieProfile$X == movieProfile[i,'X'],-1]))[[1]]
movieId <- movieProfile[movieProfile$X == movieProfile[i,'X'],1]
title <- as.vector(movies[movies$movieId == movieId,"title"])[1]
cat("Movie ", title, ", and similarity score ", score , "\n")
}
pairs <- pairwise_candidates(pairwise_compare(corpus, jaccard_similarity, progress=interactive()))
pairs
print(pairs[pairs$score > .60, ])
print(pairs[pairs$score > .40, ])
print(pairs[pairs$score > .30, ])
print(pairs[pairs$score*10 > .30, ])
cat("pairs of users have a similarity score of at least 0.60", nrow(pairs[pairs$score*10 > .60, ]))
cat("pairs of users have a similarity score of at least 0.60 is : ", nrow(pairs[pairs$score*10 > .60, ]))
cat("pairs of users have a similarity score of at least 0.50 is : ", nrow(pairs[pairs$score*10 > .50, ]))
cat("pairs of users have a similarity score of at least 0.40 is : ", nrow(pairs[pairs$score*10 > .60, ]))
cat("\npairs of users have a similarity score of at least 0.60 is : ", nrow(pairs[pairs$score*10 > .60, ]))
cat("\npairs of users have a similarity score of at least 0.50 is : ", nrow(pairs[pairs$score*10 > .50, ]))
cat("\npairs of users have a similarity score of at least 0.40 is : ", nrow(pairs[pairs$score*10 > .60, ]))
cat("\npairs of users have a similarity score of at least 0.60 is : ", nrow(pairs[pairs$score*10 > .60, ]))
cat("\npairs of users have a similarity score of at least 0.50 is : ", nrow(pairs[pairs$score*10 > .50, ]))
cat("\npairs of users have a similarity score of at least 0.40 is : ", nrow(pairs[pairs$score*10 > .40, ]))
cat("\npairs of users have a similarity score of at least 0.60 is : ", nrow(pairs[pairs$score*10 > .60, ]))
cat("\npairs of users have a similarity score of at least 0.50 is : ", nrow(pairs[pairs$score*10 > .50, ]))
cat("\npairs of users have a similarity score of at least 0.40 is : ", nrow(pairs[pairs$score*10 > .40, ]))
pairs[pairs$score > .40, ]
cat("\npairs of users have a similarity score of at least 0.60 is : ", nrow(pairs[pairs$score*10 > .60, ]))
cat("\npairs of users have a similarity score of at least 0.50 is : ", nrow(pairs[pairs$score*10 > .50, ]))
cat("\npairs of users have a similarity score of at least 0.40 is : ", nrow(pairs[pairs$score*10 > .40, ]))
pairs[pairs$score*10 > .40, ]
