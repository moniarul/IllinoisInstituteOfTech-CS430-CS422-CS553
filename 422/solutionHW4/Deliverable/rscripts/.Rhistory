sprintf("Ans to (i) What is the default value of mtry - %s", ceiling(log(15, 2)))
sprintf("(ii) what is the optimal value of mtry? - Optimal when mtry = 2, { ...2.OOB    2    0.178}")
forest.mtry.model <- randomForest(income ~ ., data = adult.train, importance=T, mtry=2)
forest.mtry.pred <- predict(forest.mtry.model, adult.test, type="class")
forestMtryCM <- confusionMatrix(forest.mtry.pred, adult.test$income)
print.AESeSp(forestMtryCM)
varImp <- varImpPlot(forest.mtry.model)
sprintf("Ans to (5) MeanDecreaseAccuracy - Most Important 'capital_gain', least Important 'native_country' . MeanDecreaseGini - most important 'capital_gain', least important 'race'" )
print("There is a significant improvement in Balanced accuracy and Specificity, as now we are using optimal mTree split this was expected")
setwd("~/Desktop/Assignments&Coursework/422/Hw-2-March4/")
trans <- read.transactions("groceries.csv", sep=",")
#Load libraries
library(rpart)
library(caret)
library(rpart.plot)
library(ROCR)
options("digits"=3)
rm(list=ls())
# Load the Diabetes dataset and set seed
setwd("~/Desktop/Assignments&Coursework/422/Assignment3/")
set.seed(1122)
mamal <- read.csv("file19.csv", header=T, sep=",")
dim(mamal)
#Load libraries
options("digits"=3)
rm(list=ls())
# Load the Diabetes dataset and set seed
setwd("~/Desktop/Assignments&Coursework/422/Assignment3/")
set.seed(1122)
mamal <- read.csv("file19.csv", header=T, sep=",")
dim(mamal)
#Load libraries
options("digits"=3)
rm(list=ls())
# Load the Diabetes dataset and set seed
setwd("~/Desktop/Assignments&Coursework/422/Assignment3/")
set.seed(1122)
mamal <- read.csv("file19.csv", header=T, sep=" ")
#Load libraries
options("digits"=3)
rm(list=ls())
# Load the Diabetes dataset and set seed
setwd("~/Desktop/Assignments&Coursework/422/Assignment3/")
set.seed(1122)
mamal <- read.csv("file19.csv", header=T, sep=",")
dim(mamal)
#Load libraries
options("digits"=3)
rm(list=ls())
# Load the Diabetes dataset and set seed
setwd("~/Desktop/Assignments&Coursework/422/Assignment3/")
set.seed(1122)
mamal <- read.csv("file19.csv", header=T, sep=",")
dim(mamal)
#Load libraries
options("digits"=3)
rm(list=ls())
# Load the Diabetes dataset and set seed
setwd("~/Desktop/Assignments&Coursework/422/Assignment3/")
set.seed(1122)
mamal <- read.csv("file19.csv", header=T, sep=",")
dim(mamal)
rownames(mamal) <- mamal[,1]
mamal <- mamal [ , -1]
head(mamal)
#Load libraries
options("digits"=3)
rm(list=ls())
# Load the Diabetes dataset and set seed
setwd("~/Desktop/Assignments&Coursework/422/Assignment3/")
set.seed(1122)
mamal <- read.csv("file19.csv", header=T, sep=",")
dim(mamal)
#rownames(mamal) <- mamal[,1]
#mamal <- mamal [ , -1]
#Load libraries
options("digits"=3)
rm(list=ls())
# Load the Diabetes dataset and set seed
setwd("~/Desktop/Assignments&Coursework/422/Assignment3/")
set.seed(1122)
mamal <- read.csv("file19.csv", header=T, sep=",")
dim(mamal)
rownames(mamal) <- mamal[,1]
mamal <- mamal [ , -1]
kmeans.demo.main <- function(centroids) {
x <- c(4,7,4,6,3,2,5,10,12,11,9,12)
y <- c(10,10,8,8,4,2,2,5,6,4,3,3)
df <- data.frame(x,y)
cluster.centroids <- centroids
old.cluster.centroids <- cluster.centroids
for (i in 1:100) {
kmeans.demo.plot(df, cluster.centroids)
readline(prompt="Press <enter> to continue")
cluster.centroids <- kmeans.demo.training(df, cluster.centroids)
readline(prompt="Press <enter> to continue")
if (identical(cluster.centroids, old.cluster.centroids)) { break }
old.cluster.centroids <- cluster.centroids
}
cat(paste("Iterations to converge: ", i, "\n"))
}
kmeans.demo.main(data.frame(x=c(1,2,3), y=c(10,10,10)))
# CS422 Data Mining
# Vijay K. Gurbani, Ph.D.
# Illinois Institute of Technology
#
# Demonstration of k-means clustering.  Algorithm below is for demonstration
# purpose only; lot's of hard-coded stuff. Don't assume it will work for all
# sorts of data and clustering strategies!!
rm(list=ls())
# Main entry point.  To run, give the coordinates of the cluster centroids.
#
# > kmeans.demo.main(data.frame(x=c(9,10,11), y=c(2,3,4)))
# or
# > kmeans.demo.main(data.frame(x=c(1,6,10), y=c(10,6,8)))
#
# The following cluster centroid will result in only 2 clusters: red and black.
# (Some warnings are thrown as the code does not handle corner cases
# approriately.)
#
# > kmeans.demo.main(data.frame(x=c(1,2,3), y=c(10,10,10)))
#
# Other centroids: data.frame(x=c(1,12,6), y=c(1,10,6))
kmeans.demo.main <- function(centroids) {
x <- c(4,7,4,6,3,2,5,10,12,11,9,12)
y <- c(10,10,8,8,4,2,2,5,6,4,3,3)
df <- data.frame(x,y)
cluster.centroids <- centroids
old.cluster.centroids <- cluster.centroids
for (i in 1:100) {
kmeans.demo.plot(df, cluster.centroids)
readline(prompt="Press <enter> to continue")
cluster.centroids <- kmeans.demo.training(df, cluster.centroids)
readline(prompt="Press <enter> to continue")
if (identical(cluster.centroids, old.cluster.centroids)) { break }
old.cluster.centroids <- cluster.centroids
}
cat(paste("Iterations to converge: ", i, "\n"))
}
# Plot the data points and the centroids
kmeans.demo.plot <- function(df, cluster.centroids) {
plot(df, xlim=c(0,13), ylim=c(0,11))
points(cluster.centroids[1,1], cluster.centroids[1,2], col="green", pch=8)
points(cluster.centroids[2,1], cluster.centroids[2,2], col="red", pch=8)
points(cluster.centroids[3,1], cluster.centroids[3,2], col="black", pch=8)
}
# "Train" the dataset by seeing which points belong to which cluster
kmeans.demo.training <- function(df, cluster.centroids)  {
green.df <- data.frame();
red.df <- data.frame();
black.df <- data.frame();
for (i in 1:dim(df)[1])  {
paint <- kmeans.demo.which.cluster(df[i,1], df[i,2], cluster.centroids)
points(df[i,1], df[i,2], col=paint, pch=20)
if (paint == "green") { green.df <- rbind(green.df, df[i,])}
if (paint == "red")   { red.df   <- rbind(red.df, df[i,])}
if (paint == "black") { black.df <- rbind(black.df, df[i,])}
}
cluster.centroids <- kmeans.demo.update.centroids(green.df,
red.df,
black.df,
cluster.centroids)
cluster.centroids
}
# Determine which point to paint with which color
kmeans.demo.which.cluster <- function(x, y, cluster.centroids)  {
df <- data.frame(c(x, cluster.centroids[1,1]), c(y, cluster.centroids[1,2]))
d1 <- dist(df) # green
df <- data.frame(c(x, cluster.centroids[2,1]), c(y, cluster.centroids[2,2]))
d2 <- dist(df) # red
df <- data.frame(c(x, cluster.centroids[3,1]), c(y, cluster.centroids[3,2]))
d3 <- dist(df) # black
indx <- which.min(c(d1,d2,d3))
if (indx == 1) {
paint = "green"
} else if (indx == 2){
paint = "red"
} else {
paint = "black"
}
paint
}
# Update the centroids to their new location.
kmeans.demo.update.centroids <- function(green.df,
red.df,
black.df,
cluster.centroids) {
cluster.centroids <- data.frame(x = c(mean(green.df$x),
mean(red.df$x),
mean(black.df$x)),
y = c(mean(green.df$y),
mean(red.df$y),
mean(black.df$y)))
cluster.centroids
}
kmeans.demo.main(data.frame(x=c(1,2,3), y=c(10,10,10)))
kmeans.demo.main(data.frame(x=c(9,10,11), y=c(2,3,4)))
kmeans.demo.main(data.frame(x=c(1,2,3), y=c(10,10,10)))
install.packages(c("cluster", "factoextra"))
#Load libraries
library(factoextra)
options("digits"=3)
rm(list=ls())
# Load the Diabetes dataset and set seed
setwd("~/Desktop/Assignments&Coursework/422/Assignment3/")
set.seed(1122)
mamal <- read.csv("file19.csv", header=T, sep=",")
dim(mamal)
rownames(mamal) <- mamal[,1]
mamal <- mamal [ , -1]
mamal.scaled <- scale(mamal)
k <- kmeans(mamal, centers=2)
k.scaled <- kmeans(mamal.scaled, centers=2)
fviz_cluster(k, data=df, main="Unscaled clusters")
#Load libraries
library(factoextra)
options("digits"=3)
rm(list=ls())
# Load the Diabetes dataset and set seed
setwd("~/Desktop/Assignments&Coursework/422/Assignment3/")
set.seed(1122)
mamal <- read.csv("file19.csv", header=T, sep=",")
dim(mamal)
rownames(mamal) <- mamal[,1]
mamal <- mamal [ , -1]
mamal.scaled <- scale(mamal)
k <- kmeans(mamal, centers=2)
k.scaled <- kmeans(mamal.scaled, centers=2)
fviz_cluster(k, data=mamal, main="Unscaled clusters")
fviz_cluster(k.scaled, data=mamal.scaled, main="Scaled clusters")
print(k)
print(k.scaled)
setwd("/home/vkg/IIT/CS422/lectures/lecture-8/")
library(cluster)
library(factoextra)
data("iris")
k <- kmeans(iris[1:4], centers=3, nstart=25) # The nstart paramater attemps to run
# multiple initial configurations and reports on the best one.  Here, it will
# run 25 configurations.
fviz_cluster(k, data=iris[1:4]) # If there are > 2 dimensions in the data,
# fviz_cluster() will run PCA on the dataset and plot the data points
# according to the first two PCs.
# What happens if we choose more clusters?
fviz_cluster(kmeans(iris[1:4], centers=4, nstart=25), data=iris[1:4])
# Is 4 enough?  Or 5?  Or 6?...
fviz_cluster(kmeans(iris[1:4], centers=5, nstart=25), data=iris[1:4])
# How many clusters?  A couple of means to visuzalize it.
fviz_nbclust(iris[1:4], kmeans, method="wss") # Elbow method minimizes total
# within-cluster sum of squares (wss).  Also called a "Scree" plot.
# Silhouette measures the quality of a cluster, i.e., how well each
# point lies within its cluster.
fviz_nbclust(iris[1:4], kmeans, method="silhouette") # But hey, what does it know?
fviz_cluster(k, data=iris[1:4])
k <- kmeans(iris[1:4], centers=3, nstart=25)
k <- kmeans(iris[1:4], centers=3, nstart=25)
k1 <- kmeans(iris[1:4], centers=3, nstart=25) # The nstart paramater attemps to run
k <- kmeans(iris[1:4], centers=3, nstart=25) # The nstart paramater attemps to run
fviz_cluster(k, data=iris[1:4])
fviz_cluster(kmeans(iris[1:4], centers=4, nstart=25), data=iris[1:4])
fviz_cluster(kmeans(iris[1:4], centers=5, nstart=25), data=iris[1:4])
fviz_nbclust(iris[1:4], kmeans, method="wss")
fviz_nbclust(iris[1:4], kmeans, method="silhouette")
fviz_nbclust(k.scaled, kmeans, method="wss")
fviz_nbclust(mamal.scaled, kmeans, method="wss")
fviz_nbclust(mamal.scaled, kmeans, method="silhouette")
k.scaled <- kmeans(mamal.scaled, centers=5)
k.scaled <- kmeans(mamal.scaled, centers=5)
fviz_cluster(k.scaled, data=mamal.scaled, main="Scaled clusters of Mamals Dataset")
print(k.scaled)
k.scaled <- kmeans(mamal.scaled, centers=5)
fviz_cluster(k.scaled, data=mamal.scaled, main="Scaled clusters of Mamals Dataset")
k.scaled <- kmeans(mamal.scaled, centers=4)
fviz_cluster(k.scaled, data=mamal.scaled, main="Scaled clusters of Mamals Dataset")
print(k.scaled)
k.scaled <- kmeans(mamal.scaled, centers=8)
fviz_cluster(k.scaled, data=mamal.scaled, main="Scaled clusters of Mamals Dataset")
print(k.scaled)
k.scaled <- kmeans(mamal.scaled, centers=7)
fviz_cluster(k.scaled, data=mamal.scaled, main="Scaled clusters of Mamals Dataset")
print(k.scaled)
k.scaled <- kmeans(mamal.scaled, centers=7, nstart=25)
k.scaled <- kmeans(mamal.scaled, centers=7, nstart=25)
fviz_cluster(k.scaled, data=mamal.scaled, main="Scaled clusters of Mamals Dataset")
k.scaled <- kmeans(mamal.scaled, centers=7, nstart=50)
fviz_cluster(k.scaled, data=mamal.scaled, main="Scaled clusters of Mamals Dataset")
wssk <- fviz_nbclust(mamal.scaled, kmeans, method="wss")
silhouettek <- fviz_nbclust(mamal.scaled, kmeans, method="silhouette")
wssk
silhouettek
names(silhouettek)
silhouettek.labels
silhouettek.mapping
wssk
silhouettek
wssk
silhouettek
wssk
k.scaled <- kmeans(mamal.scaled, centers=7, nstart=50)
k.scaled <- kmeans(mamal.scaled, centers=8, nstart=50)
fviz_cluster(k.scaled, data=mamal.scaled, main="Scaled clusters of Mamals Dataset")
k.scaled <- kmeans(mamal.scaled, centers=8, nstart=25)
k.scaled <- kmeans(mamal.scaled, centers=8, nstart=25)
k.scaled <- kmeans(mamal.scaled, centers=8, nstart=10)
k.scaled <- kmeans(mamal.scaled, centers=8, nstart=1)
wssk <- fviz_nbclust(mamal.scaled, kmeans, method="wss")
silhouettek <- fviz_nbclust(mamal.scaled, kmeans, method="silhouette")
k.scaled <- kmeans(mamal.scaled, centers=8, nstart=1)
k.scaled <- kmeans(mamal.scaled, centers=8)
k.scaled <- kmeans(mamal.scaled, centers=7)
fviz_cluster(k.scaled, data=mamal.scaled, main="Scaled clusters of Mamals Dataset")
k.scaled <- kmeans(mamal.scaled, centers=8, nstart=1)
fviz_cluster(k.scaled, data=mamal.scaled, main="Scaled clusters of Mamals Dataset")
k.scaled <- kmeans(mamal.scaled, centers=8, nstart=25)
fviz_cluster(k.scaled, data=mamal.scaled, main="Scaled clusters of Mamals Dataset")
wssk <- fviz_nbclust(mamal.scaled, kmeans, method="wss")
silhouettek <- fviz_nbclust(mamal.scaled, kmeans, method="silhouette")
k.scaled <- kmeans(mamal.scaled, centers=8, nstart=10)
k.scaled <- kmeans(mamal.scaled, centers=8, nstart=10)
print(k.scaled.cluster)
print(k.scaled['cluster'])
names(k)
names(k.scaled)
k.scaled.cluster
print( k.scaled.cluster)
print(k.scaled.cluster)
print(k.scaled['cluster'])
print(k.scaled['size'])
print(k.scaled['size'])
name(k.scaled)
names(k.scaled)
print(k.scaled['tot.withinss'])
print(k.scaled['tot.withinss'])
print(k.scaled['tot.withinss'] + '%')
print(`${k.scaled['tot.withinss']} %`)
cat("%d \%" , k.scaled['tot.withinss'])
cat("%d %" , k.scaled['tot.withinss'])
cat( k.scaled['tot.withinss'])
sprints( "%f", k.scaled['tot.withinss'])
sprintf( "%f", k.scaled['tot.withinss'])
sprintf( "%f \%", k.scaled['tot.withinss'])
sprintf( "%f %", k.scaled['tot.withinss'])
sprintf( "%f \\%", k.scaled['tot.withinss'])
sprintf( "%f '%'", k.scaled['tot.withinss'])
sprintf( "%f \\", k.scaled['tot.withinss'])
sprintf( "%f \\%", k.scaled['tot.withinss'])
sprintf( "%f \", k.scaled['tot.withinss'])
sprintf( "%f \\", k.scaled['tot.withinss'])
sprintf( "%f \\", k.scaled['tot.withinss'])
sprintf( "%f \\%", k.scaled['tot.withinss'])
sprintf( "%f percent", k.scaled['tot.withinss'])
sprintf( "%f percent", k.scaled['totss'])
k.scaled['totss']
sprintf( "%f", k.scaled['withinss'])
sprintf(k.scaled['withinss'])
print(k.scaled['withinss'])
sprintf( "%f", k.scaled['totss'])
which(k.scaled$cluster == 1)
which(k.scaled$cluster == 1)
which(k.scaled$cluster == 2)
which(k.scaled$cluster == 1)
print ("\n")
which(k.scaled$cluster == 2)
which(k.scaled$cluster == 1)
print ("\n")
which(k.scaled$cluster == 2)
print ("\n")
which(k.scaled$cluster == 3)
print ("\n")
which(k.scaled$cluster == 4)
which(k.scaled$cluster == 1)
print ("\n")
which(k.scaled$cluster == 2)
print ("\n")
which(k.scaled$cluster == 3)
print ("\n")
which(k.scaled$cluster == 4)
print ("\n")
which(k.scaled$cluster == 5)
print ("\n")
which(k.scaled$cluster == 6)
print ("\n")
which(k.scaled$cluster == 7)
#Load libraries
library(textreuse)
options("digits"=3)
rm(list=ls())
#Load libraries
library(textreuse)
options("digits"=3)
rm(list=ls())
files <- list.files("/Users/diesel/Desktop/Assignments&Coursework/422/hw4/Deliverable/hw4.movies", full.names=T)
corpus <- TextReuseCorpus(files, tokenizer = tokenize_ngrams, n = 5,
keep_tokens = TRUE)
dim(corpus)
head(corpus)
head(corpus, 10)
summary(corpus)
tokens(corpus)
size(tokens(corpus))
length(tokens(corpus))
length(tokens(corpus))
wordcount(doc)
length(tokens(corpus))
wordcount(corpus)
length(tokens(corpus))
corpus
meta(corpus)
head(tokens(corpus))
corpus
meta(corpus)
size(tokens(corpus))
length(tokens(corpus))
corpus
meta(corpus)
length(tokens(corpus))
corpus
meta(corpus)
#length(tokens(corpus))
#corpus
#meta(corpus)
length(corpus)
length(tokens(corpus))
tokens(doc[0])
tokens(corpus[0])
tokens(corpus[1])
length(tokens(corpus[1]))
size(tokens(corpus[1]))
tokens(corpus[1])
x <- tokens(corpus[1])
x <- tokens(corpus[1])
length(x)
x <- tokens(corpus[1])
x
x <- tokens(corpus[1])
type x
#length(tokens(corpus))
#corpus
#meta(corpus)
noOfDoc <- length(corpus)
totalShingles <- 0
for (doc in 1:noOfDoc){
totalShingles <- totalShingles + tokens(corpus[1])
}
#Load libraries
library(textreuse)
options("digits"=3)
rm(list=ls())
files <- list.files("/Users/diesel/Desktop/Assignments&Coursework/422/hw4/Deliverable/hw4.movies", full.names=T)
corpus <- TextReuseCorpus(files, tokenizer = tokenize_ngrams, n = 5,
keep_tokens = TRUE)
#length(tokens(corpus))
#corpus
#meta(corpus)
noOfDoc <- length(corpus)
totalShingles <- 0
for (doc in 1:noOfDoc){
totalShingles <- totalShingles + tokens(corpus[1])
}
length(tokens(corpus))
corpus
meta(corpus)
noOfDoc <- length(corpus)
totalShingles <- 0
head(corpus)
head(corpus)
corpus[[1]]
corpus[[2]]
size(hashes(doc))
dim(hashes(doc))
head(hashes(doc))
head(hashes(corpus))
size(hashes(corpus))
dim(hashes(corpus))
head(hashes(corpus))
(hashes(corpus)[671])
(hashes(corpus)[672])
(hashes(corpus)[671])
(unique(hashes(corpus)[671]))
unique(hashes(corpus)[671])
unique(tokens(corpus)[671])
x <- tokens(corpus)[671]
x <- tokens(corpus)[671]
x[!duplicated(x)]
meta(corpus)
x <- tokens(corpus)[671]
x[!duplicated(x)]
size(corpus)
length(corpus)
length(corpus)
columns <- length(corpus)
for(doc in 1:columns){
}
columns <- length(corpus)
for(doc in 1:columns){
length(tokens(corpus[doc]))
}
columns <- length(corpus)
for(doc in 1:columns){
print(length(tokens(corpus[doc])))
}
columns <- length(corpus)
for(doc in 1:columns){
tokens(corpus[doc])
}
columns <- length(corpus)
for(doc in 1:columns){
print(tokens(corpus[doc]))
}
columns <- length(corpus)
for(doc in 1:columns){
print(tokens(corpus[doc]))
}
